// Code generated by proroc-gen-graphql, DO NOT EDIT.
package pb

import (
	"context"

	"github.com/graphql-go/graphql"
	"github.com/pkg/errors"
	gql_ptypes_timestamp "github.com/ysugimoto/grpc-graphql-gateway/ptypes/timestamp"
	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"google.golang.org/grpc"
)

var (
	gql__type_UpdatePostRequest  *graphql.Object      // message UpdatePostRequest in pb/service.proto
	gql__type_Post               *graphql.Object      // message Post in pb/service.proto
	gql__type_ListPostResponse   *graphql.Object      // message ListPostResponse in pb/service.proto
	gql__type_GetPostRequest     *graphql.Object      // message GetPostRequest in pb/service.proto
	gql__type_DeletePostRequest  *graphql.Object      // message DeletePostRequest in pb/service.proto
	gql__input_UpdatePostRequest *graphql.InputObject // message UpdatePostRequest in pb/service.proto
	gql__input_Post              *graphql.InputObject // message Post in pb/service.proto
	gql__input_ListPostResponse  *graphql.InputObject // message ListPostResponse in pb/service.proto
	gql__input_GetPostRequest    *graphql.InputObject // message GetPostRequest in pb/service.proto
	gql__input_DeletePostRequest *graphql.InputObject // message DeletePostRequest in pb/service.proto
)

func Gql__type_UpdatePostRequest() *graphql.Object {
	if gql__type_UpdatePostRequest == nil {
		gql__type_UpdatePostRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_UpdatePostRequest",
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type: graphql.String,
				},
				"post": &graphql.Field{
					Type: Gql__type_Post(),
				},
			},
		})
	}
	return gql__type_UpdatePostRequest
}

func Gql__type_Post() *graphql.Object {
	if gql__type_Post == nil {
		gql__type_Post = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_Post",
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type: graphql.String,
				},
				"title": &graphql.Field{
					Type: graphql.String,
				},
				"description": &graphql.Field{
					Type: graphql.String,
				},
				"created_on": &graphql.Field{
					Type: gql_ptypes_timestamp.Gql__type_Timestamp(),
				},
				"updated_on": &graphql.Field{
					Type: gql_ptypes_timestamp.Gql__type_Timestamp(),
				},
			},
		})
	}
	return gql__type_Post
}

func Gql__type_ListPostResponse() *graphql.Object {
	if gql__type_ListPostResponse == nil {
		gql__type_ListPostResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_ListPostResponse",
			Fields: graphql.Fields{
				"posts": &graphql.Field{
					Type: graphql.NewList(Gql__type_Post()),
				},
			},
		})
	}
	return gql__type_ListPostResponse
}

func Gql__type_GetPostRequest() *graphql.Object {
	if gql__type_GetPostRequest == nil {
		gql__type_GetPostRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_GetPostRequest",
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_GetPostRequest
}

func Gql__type_DeletePostRequest() *graphql.Object {
	if gql__type_DeletePostRequest == nil {
		gql__type_DeletePostRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_DeletePostRequest",
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_DeletePostRequest
}

func Gql__input_UpdatePostRequest() *graphql.InputObject {
	if gql__input_UpdatePostRequest == nil {
		gql__input_UpdatePostRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_UpdatePostRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"id": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"post": &graphql.InputObjectFieldConfig{
					Type: Gql__input_Post(),
				},
			},
		})
	}
	return gql__input_UpdatePostRequest
}

func Gql__input_Post() *graphql.InputObject {
	if gql__input_Post == nil {
		gql__input_Post = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_Post",
			Fields: graphql.InputObjectConfigFieldMap{
				"id": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"title": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"description": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"created_on": &graphql.InputObjectFieldConfig{
					Type: gql_ptypes_timestamp.Gql__input_Timestamp(),
				},
				"updated_on": &graphql.InputObjectFieldConfig{
					Type: gql_ptypes_timestamp.Gql__input_Timestamp(),
				},
			},
		})
	}
	return gql__input_Post
}

func Gql__input_ListPostResponse() *graphql.InputObject {
	if gql__input_ListPostResponse == nil {
		gql__input_ListPostResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_ListPostResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"posts": &graphql.InputObjectFieldConfig{
					Type: graphql.NewList(Gql__input_Post()),
				},
			},
		})
	}
	return gql__input_ListPostResponse
}

func Gql__input_GetPostRequest() *graphql.InputObject {
	if gql__input_GetPostRequest == nil {
		gql__input_GetPostRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_GetPostRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"id": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_GetPostRequest
}

func Gql__input_DeletePostRequest() *graphql.InputObject {
	if gql__input_DeletePostRequest == nil {
		gql__input_DeletePostRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_DeletePostRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"id": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_DeletePostRequest
}

// graphql__resolver_PostsService is a struct for making query, mutation and resolve fields.
// This struct must be implemented runtime.SchemaBuilder interface.
type graphql__resolver_PostsService struct {

	// Automatic connection host
	host string

	// grpc dial options
	dialOptions []grpc.DialOption

	// grpc client connection.
	// this connection may be provided by user
	conn *grpc.ClientConn
}

// new_graphql_resolver_PostsService creates pointer of service struct
func new_graphql_resolver_PostsService(conn *grpc.ClientConn) *graphql__resolver_PostsService {
	return &graphql__resolver_PostsService{
		conn:        conn,
		host:        "localhost:50051",
		dialOptions: []grpc.DialOption{},
	}
}

// CreateConnection() returns grpc connection which user specified or newly connected and closing function
func (x *graphql__resolver_PostsService) CreateConnection(ctx context.Context) (*grpc.ClientConn, func(), error) {
	// If x.conn is not nil, user injected their own connection
	if x.conn != nil {
		return x.conn, func() {}, nil
	}

	// Otherwise, this handler opens connection with specified host
	conn, err := grpc.DialContext(ctx, x.host, x.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	return conn, func() { conn.Close() }, nil
}

// GetQueries returns acceptable graphql.Fields for Query.
func (x *graphql__resolver_PostsService) GetQueries(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{
		"post": &graphql.Field{
			Type: Gql__type_Post(),
			Args: graphql.FieldConfigArgument{
				"id": &graphql.ArgumentConfig{
					Type: graphql.String,
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req GetPostRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for post")
				}
				client := NewPostsServiceClient(conn)
				resp, err := client.GetPost(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC GetPost")
				}
				return resp, nil
			},
		},
	}
}

// GetMutations returns acceptable graphql.Fields for Mutation.
func (x *graphql__resolver_PostsService) GetMutations(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{
		"createPost": &graphql.Field{
			Type: Gql__type_Post(),
			Args: graphql.FieldConfigArgument{
				"id": &graphql.ArgumentConfig{
					Type: graphql.String,
				},
				"title": &graphql.ArgumentConfig{
					Type: graphql.String,
				},
				"description": &graphql.ArgumentConfig{
					Type: graphql.String,
				},
				"created_on": &graphql.ArgumentConfig{
					Type: gql_ptypes_timestamp.Gql__input_Timestamp(),
				},
				"updated_on": &graphql.ArgumentConfig{
					Type: gql_ptypes_timestamp.Gql__input_Timestamp(),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req Post
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for createPost")
				}
				client := NewPostsServiceClient(conn)
				resp, err := client.CreatePost(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC CreatePost")
				}
				return resp, nil
			},
		},
	}
}

// Register package divided graphql handler "without" *grpc.ClientConn,
// therefore gRPC connection will be opened and closed automatically.
// Occasionally you may worry about open/close performance for each handling graphql request,
// then you can call RegisterPostsServiceGraphqlHandler with *grpc.ClientConn manually.
func RegisterPostsServiceGraphql(mux *runtime.ServeMux) error {
	return RegisterPostsServiceGraphqlHandler(mux, nil)
}

// Register package divided graphql handler "with" *grpc.ClientConn.
// this function accepts your defined grpc connection, so that we reuse that and never close connection inside.
// You need to close it maunally when application will terminate.
// Otherwise, you can specify automatic opening connection with ServiceOption directive:
//
// service PostsService {
//    option (graphql.service) = {
//        host: "host:port"
//        insecure: true or false
//    };
//
//    ...with RPC definitions
// }
func RegisterPostsServiceGraphqlHandler(mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return mux.AddHandler(new_graphql_resolver_PostsService(conn))
}
